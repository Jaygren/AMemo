package com.szemingcheng.amemo.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.szemingcheng.amemo.entity.NoteBK;
import com.szemingcheng.amemo.entity.User;

import com.szemingcheng.amemo.entity.Memo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEMO".
*/
public class MemoDao extends AbstractDao<Memo, Long> {

    public static final String TABLENAME = "MEMO";

    /**
     * Properties of entity Memo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _ID = new Property(0, Long.class, "_ID", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Context = new Property(2, String.class, "context", false, "CONTEXT");
        public final static Property Memotxt = new Property(3, String.class, "memotxt", false, "MEMOTXT");
        public final static Property Pic = new Property(4, String.class, "pic", false, "PIC");
        public final static Property Creatat = new Property(5, Long.class, "creatat", false, "CREATAT");
        public final static Property Updateat = new Property(6, Long.class, "updateat", false, "UPDATEAT");
        public final static Property Reminder_date = new Property(7, Long.class, "reminder_date", false, "REMINDER_DATE");
        public final static Property State = new Property(8, int.class, "state", false, "STATE");
        public final static Property Type = new Property(9, int.class, "type", false, "TYPE");
        public final static Property NoteBK_ID = new Property(10, Long.class, "NoteBK_ID", false, "NOTE_BK__ID");
        public final static Property User_ID = new Property(11, Long.class, "User_ID", false, "USER__ID");
    }

    private DaoSession daoSession;

    private Query<Memo> noteBK_MemosQuery;
    private Query<Memo> user_MemosQuery;

    public MemoDao(DaoConfig config) {
        super(config);
    }
    
    public MemoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEMO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _ID
                "\"TITLE\" TEXT," + // 1: title
                "\"CONTEXT\" TEXT," + // 2: context
                "\"MEMOTXT\" TEXT," + // 3: memotxt
                "\"PIC\" TEXT," + // 4: pic
                "\"CREATAT\" INTEGER," + // 5: creatat
                "\"UPDATEAT\" INTEGER," + // 6: updateat
                "\"REMINDER_DATE\" INTEGER," + // 7: reminder_date
                "\"STATE\" INTEGER NOT NULL ," + // 8: state
                "\"TYPE\" INTEGER NOT NULL ," + // 9: type
                "\"NOTE_BK__ID\" INTEGER," + // 10: NoteBK_ID
                "\"USER__ID\" INTEGER);"); // 11: User_ID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEMO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Memo entity) {
        stmt.clearBindings();
 
        Long _ID = entity.get_ID();
        if (_ID != null) {
            stmt.bindLong(1, _ID);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String context = entity.getContext();
        if (context != null) {
            stmt.bindString(3, context);
        }
 
        String memotxt = entity.getMemotxt();
        if (memotxt != null) {
            stmt.bindString(4, memotxt);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(5, pic);
        }
 
        Long creatat = entity.getCreatat();
        if (creatat != null) {
            stmt.bindLong(6, creatat);
        }
 
        Long updateat = entity.getUpdateat();
        if (updateat != null) {
            stmt.bindLong(7, updateat);
        }
 
        Long reminder_date = entity.getReminder_date();
        if (reminder_date != null) {
            stmt.bindLong(8, reminder_date);
        }
        stmt.bindLong(9, entity.getState());
        stmt.bindLong(10, entity.getType());
 
        Long NoteBK_ID = entity.getNoteBK_ID();
        if (NoteBK_ID != null) {
            stmt.bindLong(11, NoteBK_ID);
        }
 
        Long User_ID = entity.getUser_ID();
        if (User_ID != null) {
            stmt.bindLong(12, User_ID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Memo entity) {
        stmt.clearBindings();
 
        Long _ID = entity.get_ID();
        if (_ID != null) {
            stmt.bindLong(1, _ID);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String context = entity.getContext();
        if (context != null) {
            stmt.bindString(3, context);
        }
 
        String memotxt = entity.getMemotxt();
        if (memotxt != null) {
            stmt.bindString(4, memotxt);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(5, pic);
        }
 
        Long creatat = entity.getCreatat();
        if (creatat != null) {
            stmt.bindLong(6, creatat);
        }
 
        Long updateat = entity.getUpdateat();
        if (updateat != null) {
            stmt.bindLong(7, updateat);
        }
 
        Long reminder_date = entity.getReminder_date();
        if (reminder_date != null) {
            stmt.bindLong(8, reminder_date);
        }
        stmt.bindLong(9, entity.getState());
        stmt.bindLong(10, entity.getType());
 
        Long NoteBK_ID = entity.getNoteBK_ID();
        if (NoteBK_ID != null) {
            stmt.bindLong(11, NoteBK_ID);
        }
 
        Long User_ID = entity.getUser_ID();
        if (User_ID != null) {
            stmt.bindLong(12, User_ID);
        }
    }

    @Override
    protected final void attachEntity(Memo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Memo readEntity(Cursor cursor, int offset) {
        Memo entity = new Memo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // context
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // memotxt
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pic
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // creatat
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // updateat
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // reminder_date
            cursor.getInt(offset + 8), // state
            cursor.getInt(offset + 9), // type
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // NoteBK_ID
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // User_ID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Memo entity, int offset) {
        entity.set_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContext(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMemotxt(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPic(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreatat(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setUpdateat(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setReminder_date(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setState(cursor.getInt(offset + 8));
        entity.setType(cursor.getInt(offset + 9));
        entity.setNoteBK_ID(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setUser_ID(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Memo entity, long rowId) {
        entity.set_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Memo entity) {
        if(entity != null) {
            return entity.get_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Memo entity) {
        return entity.get_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "memos" to-many relationship of NoteBK. */
    public List<Memo> _queryNoteBK_Memos(Long NoteBK_ID) {
        synchronized (this) {
            if (noteBK_MemosQuery == null) {
                QueryBuilder<Memo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.NoteBK_ID.eq(null));
                noteBK_MemosQuery = queryBuilder.build();
            }
        }
        Query<Memo> query = noteBK_MemosQuery.forCurrentThread();
        query.setParameter(0, NoteBK_ID);
        return query.list();
    }

    /** Internal query to resolve the "memos" to-many relationship of User. */
    public List<Memo> _queryUser_Memos(Long User_ID) {
        synchronized (this) {
            if (user_MemosQuery == null) {
                QueryBuilder<Memo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.User_ID.eq(null));
                user_MemosQuery = queryBuilder.build();
            }
        }
        Query<Memo> query = user_MemosQuery.forCurrentThread();
        query.setParameter(0, User_ID);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getNoteBKDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM MEMO T");
            builder.append(" LEFT JOIN NOTE_BK T0 ON T.\"NOTE_BK__ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN USER T1 ON T.\"USER__ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Memo loadCurrentDeep(Cursor cursor, boolean lock) {
        Memo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        NoteBK noteBK = loadCurrentOther(daoSession.getNoteBKDao(), cursor, offset);
        entity.setNoteBK(noteBK);
        offset += daoSession.getNoteBKDao().getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setUser(user);

        return entity;    
    }

    public Memo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Memo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Memo> list = new ArrayList<Memo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Memo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Memo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
